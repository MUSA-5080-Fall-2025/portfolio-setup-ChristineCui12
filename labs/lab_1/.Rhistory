summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
kable(
caption = "High MOE Pattern"
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop Size` = Average_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic,
kable(
caption = "Comparison of Tract Characteristics by Data Reliability",
digits = 1 # 保留一位小数，提高可读性
)
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop Size` = Avg_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic,
kable(
caption = "Comparison of Tract Characteristics by Data Reliability",
digits = 1 # 保留一位小数，提高可读性
)
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop Size` = Avg_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic,
kable(
caption = "Comparison of Tract Characteristics by Data Reliability"
)
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop Size` = Avg_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic
) %>%             # <-- KEY：使用管道符将数据框传递给 kable
kable(
caption = "Comparison of Tract Characteristics by Data Reliability",
digits = 1 # 保持良好的格式化实践
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop. Size` = Avg_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic
) %>%             # <-- KEY：使用管道符将数据框传递给 kable
kable(
caption = "Comparison of Tract Characteristics by Data Reliability",
digits = 1 # 保持良好的格式化实践
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop. Size` = Avg_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic
) %>%             # <-- KEY：使用管道符将数据框传递给 kable
kable(
caption = "Comparison of Tract Characteristics by Data Reliability",
digits = 2 # 保持良好的格式化实践
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
"knitr" %in% rownames(installed.packages())
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("20068788c6e79d5716fbceb0dcd562ab23f74ca1", overwrite=TRUE, install = TRUE)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "TX"
# Write your get_acs() code here
county_data_texas <- get_acs(
geography = "county",        # 检索县级数据
variables = c(                # 指定要获取的变量及其描述性名称
median_household_income = "B19013_001",
total_population = "B01003_001"
),
state = my_state,            # 指定州
year = 2022,                 # 指定年份
survey = "acs5",             # 指定使用5年期调查
output = "wide"              # 指定输出为宽格式
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_texas <- county_data_texas %>%
mutate(
# remove state name（Texas）
NAME = str_remove(NAME, ", Texas"),
# remove " County"
NAME = str_remove(NAME, " County")
)
# Display the first few rows
head(county_data_texas)
# Calculate MOE percentage and reliability categories using mutate()
county_data_texas <- county_data_texas %>%
mutate(
# Calculate MOE percentage
income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100,
# Create reliability categories
income_reliability = case_when(
income_moe_pct < 5 ~ "High Confidence",
income_moe_pct >= 5 & income_moe_pct <= 10 ~ "Moderate Confidence",
income_moe_pct > 10 ~ "Low Confidence"
),
# Create a flag for unreliable estimates
unreliable_income = income_moe_pct > 10
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
county_data_texas %>%
count(income_reliability) %>%
mutate(
percentage = (n / sum(n)) * 100
)
# Create table of top 5 counties by MOE percentage
library(knitr)
county_data_texas %>%
arrange(desc(income_moe_pct)) %>%
slice(1:5) %>%
select(
`County Name` = NAME,
`Median Income` = median_household_incomeE,
`Margin of Error` = median_household_incomeM,
`MOE Percentage` = income_moe_pct,
`Reliability Category` = income_reliability
) %>%
# Format as table with kable() - include appropriate column names and caption
kable(
caption = "Top 5 Counties with The Highest MOE Percentages",
digits = 2
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- county_data_texas %>%
filter(
income_moe_pct > 30 |
(income_moe_pct >= 5 & income_moe_pct <= 10) |
income_moe_pct < 2
) %>%
# select 3
group_by(income_reliability) %>%
slice(1)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties %>%
select(
`County Name` = NAME,
`Median Income` = median_household_incomeE,
`MOE Percentage` = income_moe_pct,
`Reliability Category` = income_reliability
) %>%
kable(
caption = "3 Counties Selected for Tract-Level Study",
digits= 2
)
# Define your race/ethnicity variables with descriptive names
ethnicity_variables <- c(
white_alone = "B03002_003",
Black_African_American = "B03002_004",
Hispanic_Latino = "B03002_012",
total_population = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
selected_county_geoids <- selected_counties$GEOID
selected_county_codes <- str_sub(selected_county_geoids, start = -3) #the last 3 numbers of GEOID is county codes
tract_data_texas <- get_acs(
geography = "tract",        # 普查区级别
variables = ethnicity_variables,         # 指定要获取的变量及其描述性名称
state = my_state,            # 指定州
county = selected_county_codes, # 将县的 GEOID 作为 county 参数
year = 2022,                 # 指定年份
survey = "acs5",             # 指定使用5年期调查
output = "wide"              # 指定输出为宽格式
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
tract_data_texas <- tract_data_texas %>%
mutate(
pct_white = (white_aloneE / total_populationE) * 100,
pct_black = (Black_African_AmericanE / total_populationE) * 100,
pct_hispanic = (Hispanic_LatinoE / total_populationE) * 100
)
# Add readable tract and county name columns using str_extract() or similar
tract_data_texas <- tract_data_texas %>%
mutate(
Tract  = str_extract(NAME, "Census Tract \\d+(?:\\.\\d+)?"),
County = str_extract(NAME, "[A-Za-z]+ County")
)
head(tract_data_texas)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_data_texas %>%
# 1. 按照 Hispanic/Latino 百分比 (pct_hispanic) 降序排列
arrange(desc(pct_hispanic)) %>%
slice(1)
top_hispanic_tract %>%
kable(
caption = "Tract with the Highest Percentage of Hispanic/Latino Residents",
)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_demographics_summary <- tract_data_texas %>%
# 1. 按照县进行分组
group_by(County) %>%
# 2. 计算每个县的汇总统计量
summarize(
number_of_tracts = n(),
# 计算各族裔/种族群体的平均百分比
avg_pct_white = mean(pct_white, na.rm = TRUE),
avg_pct_black = mean(pct_black, na.rm = TRUE),
avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),
# 计算县的总人口 (可以选择计算所有普查区人口的总和)
total_population_E = sum(total_populationE, na.rm = TRUE),
)
# 3. 格式化并展示结果
county_demographics_summary %>%
select(
`County` = County,
`Tracts` = number_of_tracts,
`Avg White/%` = avg_pct_white,
`Avg Black/%` = avg_pct_black,
`Avg Hispanic/%` = avg_pct_hispanic,
`Total Pop` = total_population_E
) %>%
# 使用 kable() 格式化输出为表格
kable(
caption = "Average Demographics by County",
digits = 2 # 百分比和小数保留一位
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_data_texas <- tract_data_texas %>%
mutate(
# Calculate MOE percentage
white_moe_pct = (white_aloneM / white_aloneE) * 100,
black_moe_pct = (Black_African_AmericanM / Black_African_AmericanE) * 100,
hispanic_moe_pct = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
demographic_reliability = ifelse(
white_moe_pct > 15 | black_moe_pct > 15 | hispanic_moe_pct > 15,"High MOE",
"Acceptable"
)
)
# Create summary statistics showing how many tracts have data quality issues
# Calculate MOE percentage and reliability categories using mutate()
tract_data_texas %>%
count(demographic_reliability) %>%
mutate(
percentage = (n / sum(n)) * 100
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_reliability_comparison <- tract_data_texas %>%
group_by(demographic_reliability) %>%
summarize(
Number_of_Tracts = n(),
Avg_Population = mean(total_populationE, na.rm = TRUE),
Avg_Pct_White = mean(pct_white, na.rm = TRUE),
Avg_Pct_Black = mean(pct_black, na.rm = TRUE),
Avg_Pct_Hispanic = mean(pct_hispanic, na.rm = TRUE)
)
tract_reliability_comparison %>%
select(
`Reliability Group` = demographic_reliability,
`Tract Count` = Number_of_Tracts,
`Avg Pop. Size` = Avg_Population,
`Avg White/%` = Avg_Pct_White,
`Avg Black/%` = Avg_Pct_Black,
`Avg Hispanic/%` = Avg_Pct_Hispanic
) %>%             # <-- KEY：使用管道符将数据框传递给 kable
kable(
caption = "Comparison of Tract Characteristics by Data Reliability",
digits = 2
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
# Format as a professional table with kable()
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
county_data_texas %>%
select(
`County Name` = NAME,
`Median Income Est.` = median_household_incomeE,
`MOE Percentage` = income_moe_pct,
`Reliability Category` = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
`Algorithm Recommendation` = case_when(
# High Confidence: MOE < 5%
`Reliability Category` == "High Confidence" ~ "Safe for algorithmic decisions",
# Moderate Confidence: MOE 5-10%
`Reliability Category` == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
# Low Confidence: MOE > 10%
`Reliability Category` == "Low Confidence" ~ "Requires manual review or additional data"
)
) %>%
# Format as a professional table with kable()
kable(
caption = "Algorithmic Implementation Framework",
digits = 2 # 保留两位小数
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
county_data_texas %>%
select(
`County Name` = NAME,
`Median Income` = median_household_incomeE,
`MOE Percentage` = income_moe_pct,
`Reliability Category` = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
`Algorithm Recommendation` = case_when(
# High Confidence: MOE < 5%
`Reliability Category` == "High Confidence" ~ "Safe for algorithmic decisions",
# Moderate Confidence: MOE 5-10%
`Reliability Category` == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
# Low Confidence: MOE > 10%
`Reliability Category` == "Low Confidence" ~ "Requires manual review or additional data"
)
) %>%
# Format as a professional table with kable()
kable(
caption = "Algorithmic Implementation Framework",
digits = 2 # 保留两位小数
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
county_data_texas %>%
select(
`County Name` = NAME,
`Median Income` = median_household_incomeE,
`MOE Percentage` = income_moe_pct,
`Reliability Category` = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
`Algorithm Recommendation` = case_when(
# High Confidence: MOE < 5%
`Reliability Category` == "High Confidence" ~ "Safe for algorithmic decisions",
# Moderate Confidence: MOE 5-10%
`Reliability Category` == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
# Low Confidence: MOE > 10%
`Reliability Category` == "Low Confidence" ~ "Requires manual review or additional data"
)
) %>%
# Format as a professional table with kable()
kable(
caption = "Algorithmic Implementation Framework",
digits = 2 # 保留两位小数
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
"knitr" %in% rownames(installed.packages())
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("20068788c6e79d5716fbceb0dcd562ab23f74ca1", overwrite=TRUE, install = TRUE)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "TX"
# Write your get_acs() code here
county_data_texas <- get_acs(
geography = "county",
variables = c(
median_household_income = "B19013_001",
total_population = "B01003_001"
),
state = my_state,
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data_texas <- county_data_texas %>%
mutate(
# remove state name（Texas）
NAME = str_remove(NAME, ", Texas"),
# remove " County"
NAME = str_remove(NAME, " County")
)
# Display the first few rows
head(county_data_texas)
