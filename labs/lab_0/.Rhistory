car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
View(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
View(car_df)
View(car_data)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, Fuel type)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, Fuel_type)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, Fuel type)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
names(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, Fuel type)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
select(car_data, `Engine size`)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data, 'Engine size')
# Rename 'Year of manufacture' to year
car_data <- car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Rename 'Year of manufacture' to yearcar_data <- car_data %>%
rename(year = `Year of manufacture`)
# Rename 'Year of manufacture' to year
car_data <- car_data %>%
rename(year = `Year of manufacture`)
# Rename 'Year of manufacture' to year
car_data <- car_data %>%
rename(year = `Year of manufacture`)
View(car_data)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data, 'Engine size)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data, 'Engine size')
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
names(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data, Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data, 'Engine size')
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - `Year of manufacture`)
# Create a mileage_per_year column
mutate(mileage_per_year = Mileage/Age)
View(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - `Year of manufacture`)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(mileage_per_year = Mileage/Age)
# Look at your new columns
#select(car_data, Model, year, age, Mileage, mileage_per_year)
car_data <- car_data %>%
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Select just Model and Mileage columns
select(Model, Mileage)
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data,Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data,-'Engine size')
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - `Year of manufacture`)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(mileage_per_year = Mileage/Age)
# Look at your new columns
#select(car_data, Model, year, age, Mileage, mileage_per_year)
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
names(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data,Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data,-'Engine size')
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - `Year of manufacture`)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(mileage_per_year = Mileage/Age)
# Look at your new columns
#select(car_data, Model, year, age, Mileage, mileage_per_year)
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_data,Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_data,-'Engine size')
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - `Year of manufacture`)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(mileage_per_year = Mileage/Age)
# Look at your new columns
#select(car_data, Model, year, age, Mileage, mileage_per_year)
select(car_data, Model, year, age, Mileage, mileage_per_year)
View(car_data)
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Rename 'Year of manufacture' to year
car_data <- car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - `Year of manufacture`)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - year)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(mileage_per_year = Mileage/Age)
# Look at your new columns
#select(car_data, Model, year, age, Mileage, mileage_per_year)
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- car_data %>%
mutate(Age = 2025 - year)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(mileage_per_year = Mileage/Age)
# Look at your new columns
#select(car_data, Model, year, age, Mileage, mileage_per_year)
select(car_data, Model, year, Age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)??????
car_data <- car_data %>%
mutate(
price_category = case_when(
price < 15000 ~ "Budget",
price >= 15000 & price <= 30000 ~ "Mid-Range",
price > 30000 ~ "Premium",
TRUE ~ "Unknown" # Safety case for NA or unexpected values
)
)
View(car_df)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)??????
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "Budget",
Price >= 15000 & price <= 30000 ~ "Mid-Range",
Price > 30000 ~ "Premium",
TRUE ~ "Unknown" # Safety case for NA or unexpected values
)
)
View(car_data)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)??????
car_data <- car_data %>%
mutate(
price_category = case_when(
Price < 15000 ~ "Budget",
Price >= 15000 & Price <= 30000 ~ "Midrange",
Price > 30000 ~ "Premium",
TRUE ~ "Unknown" # Safety case for NA or unexpected values
)
)
# Check your categories select the new column and show it
car_data %>%
select(Price, price_category) %>%
head(10)
View(car_data)
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_mileage_cars <- car_data %>%
filter(mileage < 30000)
# Find all Toyota cars
toyota_cars <- car_data %>%
filter(Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_mileage_cars <- car_data %>%
filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_low_mileage_cars <- car_data %>%
filter(
price_category == "Premium",
Mileage < 30000
)
# Find cars that are EITHER Honda OR Nissan
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & price <= 35000)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
fuel_type == "Diesel",                   # First condition: must be Diesel
Age < 10               # Second condition: age is less than 10 years
)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
Fuel_type == "Diesel",                   # First condition: must be Diesel
Age < 10               # Second condition: age is less than 10 years
)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
Fuel type == "Diesel",                   # First condition: must be Diesel
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
'Fuel type' == Diesel,                   # First condition: must be Diesel
Age < 10               # Second condition: age is less than 10 years
)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
'Fuel type' == "Diesel",                   # First condition: must be Diesel
Age < 10               # Second condition: age is less than 10 years
)
View(diesel_under_10_years)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
'Fuel type' == "Diesel",                   # First condition: must be Diesel
Age < 10               # Second condition: age is less than 10 years
)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
`Fuel type` == "Diesel",                   # First condition: must be Diesel
Age < 10               # Second condition: age is less than 10 years
)
View(diesel_under_10_years)
View(diesel_under_10_years)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
# Count cars by manufacturer
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
`Fuel type` == "Diesel",                   # First condition: must be Diesel, ``(column)and''(text)are DIFFERENT!!
Age < 10               # Second condition: age is less than 10 years
)
# Find cars that are EITHER Honda OR Nissan   (|)
honda_or_nissan <- car_data %>%
filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000  (&)
price_range_cars <- car_data %>%
filter(Price >= 20000 & Price <= 35000)
# Find diesel cars less than 10 years old
diesel_under_10_years <- car_data %>%
filter(
`Fuel type` == "Diesel",                   # First condition: must be Diesel, ``(column)and''(text)are DIFFERENT!!
Age < 10               # Second condition: age is less than 10 years
)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_price_by_fueltype <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_price_by_fueltype
# Count cars by manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_price_by_fueltype <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_price_by_fueltype
# Count cars by manufacturer
cars_by_manufacturer_simple <- car_data %>%
count(Manufacturer)
cars_by_manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_price_by_fueltype <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_price_by_fueltype
# Count cars by manufacturer
cars_number_by_manufacturer <- car_data %>%
count(Manufacturer)
cars_number_by_manufacturer
# Frequency table for price categories
price_category_frequency <- car_data %>%
# 1. Group the data by the new 'price_category' column
group_by(price_category) %>%
# 2. Summarize: count the number of rows (cars) in each category
summarize(Count = n()) %>%
# 3. Mutate: calculate the Proportion of the total
mutate(Proportion = Count / sum(Count))
price_category_frequency
# Frequency table for price categories
price_category_frequency <- car_data %>%
# 1. Group the data by the new 'price_category' column
group_by(price_category) %>%
# 2. Summarize: count the number of rows (cars) in each category
count(price_category)
# 3. Mutate: calculate the Proportion of the total
mutate(Proportion = Count / sum(Count))
# Frequency table for price categories
price_category_frequency <- car_data %>%
# 1. Group the data by the new 'price_category' column
group_by(price_category) %>%
# 2. Summarize: count the number of rows (cars) in each category
summarize(Count = n()) %>%
# 3. Mutate: calculate the Proportion of the total
mutate(Proportion = Count / sum(Count))
price_category_frequency
