# Counties filled by % underserved vulnerable tracts
geom_sf(data = county_map_data, aes(fill = pct_underserved_vulnerable), color = "white", size = 0.3) +
# Hospital locations as points
geom_sf(data = hospitals_proj, color = "red", size = 1, alpha = 0.7) +
# Color scale for access challenge
scale_fill_viridis(
name = "% Underserved Vulnerable Tracts",
option = "C",
direction = -1,
labels = function(x) paste0(x, "%")
) +
# Map titles and caption
labs(
title = "Healthcare Access Challenges Across Pennsylvania Counties",
subtitle = "Counties shaded by the percentage of vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: American Community Survey (2022), Pennsylvania Hospital Data, and U.S. Census TIGER/Line Shapefiles"
) +
# Clean minimal theme
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 10),
plot.caption = element_text(size = 9, color = "gray40"),
legend.position = "bottom"
)
# Create county-level access map
library(ggplot2)
library(viridis)
county_map_data <- pa_counties_proj %>%
left_join(county_summary, by = c("COUNTY_NAM" = "COUNTY_NAM"))
crs_display <- 4326
pa_counties <- st_transform(pa_counties, crs_display)
hospitals   <- st_transform(hospitals, crs_display)
ggplot() +
# Counties filled by % underserved vulnerable tracts
geom_sf(data = county_map_data, aes(fill = pct_underserved_vulnerable), color = "white", size = 0.3) +
# Hospital locations as points
geom_sf(data = hospitals_proj, color = "red", size = 1, alpha = 0.7) +
# Color scale for access challenge
scale_fill_viridis(
name = "% Underserved Vulnerable Tracts",
option = "C",
direction = -1,
labels = function(x) paste0(x, "%")
) +
# Map titles and caption
labs(
title = "Healthcare Access Challenges Across Pennsylvania Counties",
subtitle = "Counties shaded by the percentage of vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: American Community Survey (2022), Pennsylvania Hospital Data, and U.S. Census TIGER/Line Shapefiles"
) +
# Clean minimal theme
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 10),
plot.caption = element_text(size = 9, color = "gray40"),
legend.position = "bottom"
)
# Create detailed tract-level map
ggplot() +
# 1. 所有普查区背景（灰色）——表示非弱势区域
geom_sf(data = pa_tracts_proj, fill = "grey90", color = NA) +
# 2. 弱势但不服务不足的区域（浅黄色）
geom_sf(data = filter(pa_tracts_proj, vulnerable == TRUE & underserved == FALSE),
fill = "#FED976", color = NA) +
# 3. 服务不足的弱势区域（亮红色，最突出）
geom_sf(data = filter(pa_tracts_proj, underserved == TRUE & vulnerable == TRUE),
fill = "#E31A1C", color = "white", size = 0.05) +
# 4. 县界线（白色）
geom_sf(data = pa_counties_proj, fill = NA, color = "white", size = 0.3) +
# 5. 医院位置（蓝色点）
geom_sf(data = hospitals_proj, color = "blue", size = 0.8, alpha = 0.7) +
# 6. 添加标题、说明与数据来源
labs(
title = "Underserved Vulnerable Tracts in Pennsylvania",
subtitle = "Red areas represent vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: ACS (2022), Pennsylvania Hospital Data, U.S. Census TIGER/Line Shapefiles"
) +
# 7. 设置样式
theme_void() +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 9, color = "grey50")
)
# Spatial join tracts to counties
pa_counties_proj <- st_transform(pa_counties, crs = 4326)
tracts_county_join <- st_join(pa_tracts_proj, pa_counties_proj, join = st_intersects, left = TRUE)
# Spatial join tracts to counties
pa_counties_proj <- st_transform(pa_counties, crs = 4326)
pa_tracts_proj <- st_transform(pa_counties, crs = 4326)
tracts_county_join <- st_join(pa_tracts_proj, pa_counties_proj, join = st_intersects, left = TRUE)
# Aggregate statistics by county
county_summary <- tracts_county_join %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarise(
n_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
underserved_tracts = sum(underserved, na.rm = TRUE),
pct_underserved_vulnerable = round((underserved_tracts / vulnerable_tracts) * 100, 1),
avg_distance_vulnerable = mean(dist_to_hospital_mi[vulnerable == TRUE], na.rm = TRUE),
total_vulnerable_pop = sum(total_pop[vulnerable == TRUE], na.rm = TRUE),
underserved_vulnerable_pop = sum(total_pop[vulnerable == TRUE & underserved == TRUE], na.rm = TRUE)
) %>%
arrange(desc(pct_underserved_vulnerable))
# Spatial join tracts to counties
pa_counties_proj <- st_transform(pa_counties, crs = 4326)
pa_tracts_proj <- st_transform(pa_counties, crs = 4326)
tracts_county_join <- st_join(pa_tracts_proj, pa_counties_proj, join = st_intersects, left = TRUE)
# Aggregate statistics by county
county_summary <- tracts_county_join %>%
st_drop_geometry() %>%
group_by(NAME) %>%
summarise(
n_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
underserved_tracts = sum(underserved, na.rm = TRUE),
pct_underserved_vulnerable = round((underserved_tracts / vulnerable_tracts) * 100, 1),
avg_distance_vulnerable = mean(dist_to_hospital_mi[vulnerable == TRUE], na.rm = TRUE),
total_vulnerable_pop = sum(total_pop[vulnerable == TRUE], na.rm = TRUE),
underserved_vulnerable_pop = sum(total_pop[vulnerable == TRUE & underserved == TRUE], na.rm = TRUE)
) %>%
arrange(desc(pct_underserved_vulnerable))
View(tracts_county_join)
# Spatial join tracts to counties
pa_counties_proj <- st_transform(pa_counties, crs = 4326)
pa_tracts_proj <- st_transform(pa_counties, crs = 4326)
tracts_county_join <- st_join(pa_tracts_proj, pa_counties_proj, join = st_intersects, left = TRUE)
# Aggregate statistics by county
county_summary <- tracts_county_join %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarise(
n_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
underserved_tracts = sum(underserved, na.rm = TRUE),
pct_underserved_vulnerable = round((underserved_tracts / vulnerable_tracts) * 100, 1),
avg_distance_vulnerable = mean(dist_to_hospital_mi[vulnerable == TRUE], na.rm = TRUE),
total_vulnerable_pop = sum(total_pop[vulnerable == TRUE], na.rm = TRUE),
underserved_vulnerable_pop = sum(total_pop[vulnerable == TRUE & underserved == TRUE], na.rm = TRUE)
) %>%
arrange(desc(pct_underserved_vulnerable))
# Spatial join tracts to counties
pa_counties_proj <- st_transform(pa_counties, crs = 4326)
pa_tracts_proj <- st_transform(pa_counties, crs = 4326)
tracts_county_join <- st_join(pa_tracts_proj, pa_counties_proj, join = st_intersects, left = TRUE)
# Aggregate statistics by county
county_summary <- tracts_county_join %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM.x) %>%
summarise(
n_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
underserved_tracts = sum(underserved, na.rm = TRUE),
pct_underserved_vulnerable = round((underserved_tracts / vulnerable_tracts) * 100, 1),
avg_distance_vulnerable = mean(dist_to_hospital_mi[vulnerable == TRUE], na.rm = TRUE),
total_vulnerable_pop = sum(total_pop[vulnerable == TRUE], na.rm = TRUE),
underserved_vulnerable_pop = sum(total_pop[vulnerable == TRUE & underserved == TRUE], na.rm = TRUE)
) %>%
arrange(desc(pct_underserved_vulnerable))
# Create county-level access map
library(ggplot2)
library(viridis)
county_map_data <- pa_counties_proj %>%
left_join(county_summary, by = c("COUNTY_NAM" = "COUNTY_NAM"))
ggplot() +
# Counties filled by % underserved vulnerable tracts
geom_sf(data = county_map_data, aes(fill = pct_underserved_vulnerable), color = "white", size = 0.3) +
# Hospital locations as points
geom_sf(data = hospitals_proj, color = "red", size = 1, alpha = 0.7) +
# Color scale for access challenge
scale_fill_viridis(
name = "% Underserved Vulnerable Tracts",
option = "C",
direction = -1,
labels = function(x) paste0(x, "%")
) +
# Map titles and caption
labs(
title = "Healthcare Access Challenges Across Pennsylvania Counties",
subtitle = "Counties shaded by the percentage of vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: American Community Survey (2022), Pennsylvania Hospital Data, and U.S. Census TIGER/Line Shapefiles"
) +
# Clean minimal theme
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 10),
plot.caption = element_text(size = 9, color = "gray40"),
legend.position = "bottom"
)
# Create detailed tract-level map
ggplot() +
# 1. 所有普查区背景（灰色）——表示非弱势区域
geom_sf(data = pa_tracts_proj, fill = "grey90", color = NA) +
# 2. 弱势但不服务不足的区域（浅黄色）
geom_sf(data = filter(pa_tracts_proj, vulnerable == TRUE & underserved == FALSE),
fill = "#FED976", color = NA) +
# 3. 服务不足的弱势区域（亮红色，最突出）
geom_sf(data = filter(pa_tracts_proj, underserved == TRUE & vulnerable == TRUE),
fill = "#E31A1C", color = "white", size = 0.05) +
# 4. 县界线（白色）
geom_sf(data = pa_counties_proj, fill = NA, color = "white", size = 0.3) +
# 5. 医院位置（蓝色点）
geom_sf(data = hospitals_proj, color = "blue", size = 0.8, alpha = 0.7) +
# 6. 添加标题、说明与数据来源
labs(
title = "Underserved Vulnerable Tracts in Pennsylvania",
subtitle = "Red areas represent vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: ACS (2022), Pennsylvania Hospital Data, U.S. Census TIGER/Line Shapefiles"
) +
# 7. 设置样式
theme_void() +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 9, color = "grey50")
)
# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
census_api_key("20068788c6e79d5716fbceb0dcd562ab23f74ca1")
# Load spatial data
# 1. Pennsylvania county boundaries
pa_counties <- st_read(here("labs/lab_2/data/Pennsylvania_County_Boundaries.shp"))
# 2. Pennsylvania hospitals (from lecture data)
hospitals <- st_read(here("labs/lab_2/data/hospitals.geojson"))
# 3. Pennsylvania census tracts
census_tracts <- tracts(state = "PA", cb = TRUE)
# Check that all data loaded correctly
#check the CRS
cat("1. PA Counties:", st_crs(pa_counties)$input, "\n")
cat("2. Hospitals:", st_crs(hospitals)$input, "\n")
cat("3. Census Tracts:", st_crs(census_tracts)$input, "\n")
# Get demographic data from ACS
acs_vars <- c(
total_pop = "B01003_001",
med_hh_income = "B19013_001",
# Male 65 years and over (sum of 6 categories)
male_65_66 = "B01001_020",
male_67_69 = "B01001_021",
male_70_74 = "B01001_022",
male_75_79 = "B01001_023",
male_80_84 = "B01001_024",
male_85_up = "B01001_025",
# Female 65 years and over (sum of 6 categories)
female_65_66 = "B01001_044",
female_67_69 = "B01001_045",
female_70_74 = "B01001_046",
female_75_79 = "B01001_047",
female_80_84 = "B01001_048",
female_85_up = "B01001_049"
)
pa_demographics <- get_acs(
geography = "tract",
state = "PA",
variables = acs_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
# Calculate the combined 65+ population and rename variables
mutate(
pop_65_over = male_65_66E + male_67_69E + male_70_74E + male_75_79E + male_80_84E + male_85_upE +
female_65_66E + female_67_69E + female_70_74E + female_75_79E + female_80_84E + female_85_upE
) %>%
# Select and rename final columns for clarity and consistency
select(
GEOID,
total_pop = total_popE,
med_hh_income = med_hh_incomeE,
pop_65_over
)
# Join to tract boundaries
pa_tracts_demographics <- census_tracts %>%
left_join(pa_demographics, by = "GEOID")
#tracts have missing income data
missing_income_count <- pa_tracts_demographics %>%
summarise(missing_count = sum(is.na(med_hh_income))) %>%
pull(missing_count)
#median income across all PA census tracts
median_tract_income <- pa_tracts_demographics %>%
filter(!is.na(med_hh_income)) %>%
summarise(median_income = median(med_hh_income)) %>%
pull(median_income)
# Filter for vulnerable tracts based on your criteria
pa_tracts_demographics <- pa_tracts_demographics %>%
mutate(pct_65_over = (pop_65_over / total_pop) * 100)
income_threshold <- quantile(pa_tracts_demographics$med_hh_income, 0.25, na.rm = TRUE)
elderly_threshold <- quantile(pa_tracts_demographics$pct_65_over, 0.75, na.rm = TRUE)
pa_tracts_demographics <- pa_tracts_demographics %>%
mutate(
income_low = med_hh_income < income_threshold,
elderly_high = pct_65_over > elderly_threshold,
vulnerable = if_else(income_low & elderly_high, TRUE, FALSE)
)
# Summary: how many tracts are vulnerable?
vulnerable_summary <- pa_tracts_demographics %>%
summarise(
total_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
pct_vulnerable = round((vulnerable_tracts / total_tracts) * 100, 1)
)
vulnerable_summary
# Transform to appropriate projected CRS
pa_tracts_proj <- st_transform(pa_tracts_demographics, crs = 5070)
hospitals_proj <- st_transform(hospitals, crs = 5070)
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_tracts_proj)
nearest_dist_m <- st_distance(tract_centroids, hospitals_proj) %>%
apply(1, min)  # minimum distance for each tract
pa_tracts_proj <- pa_tracts_proj %>%
mutate(
dist_to_hospital_m = nearest_dist_m,
dist_to_hospital_mi = dist_to_hospital_m / 1609.34
)
vulnerable_distance_summary <- pa_tracts_proj %>%
filter(vulnerable == TRUE) %>%
summarise(
avg_distance_mi = mean(dist_to_hospital_mi, na.rm = TRUE),
max_distance_mi = max(dist_to_hospital_mi, na.rm = TRUE),
over_15_miles = sum(dist_to_hospital_mi > 15, na.rm = TRUE)
)
vulnerable_distance_summary
# Create underserved variable
pa_tracts_proj <- pa_tracts_proj %>%
mutate(
underserved = if_else(vulnerable == TRUE & dist_to_hospital_mi > 15, TRUE, FALSE)
)
# Summarize underserved tracts
underserved_summary <- pa_tracts_proj %>%
summarise(
total_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
underserved_tracts = sum(underserved, na.rm = TRUE),
pct_underserved = round((underserved_tracts / vulnerable_tracts) * 100, 1)
)
underserved_summary
# Spatial join tracts to counties
pa_counties_proj <- st_transform(pa_counties, st_crs(pa_tracts_proj))
tracts_county_join <- st_join(pa_tracts_proj, pa_counties_proj, join = st_intersects, left = TRUE)
# Aggregate statistics by county
county_summary <- tracts_county_join %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarise(
n_tracts = n(),
vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
underserved_tracts = sum(underserved, na.rm = TRUE),
pct_underserved_vulnerable = round((underserved_tracts / vulnerable_tracts) * 100, 1),
avg_distance_vulnerable = mean(dist_to_hospital_mi[vulnerable == TRUE], na.rm = TRUE),
total_vulnerable_pop = sum(total_pop[vulnerable == TRUE], na.rm = TRUE),
underserved_vulnerable_pop = sum(total_pop[vulnerable == TRUE & underserved == TRUE], na.rm = TRUE)
) %>%
arrange(desc(pct_underserved_vulnerable))
head(county_summary, 10)
# Plot map of percent underserved by Pennsylvania counties.
county_map <- pa_counties_proj %>%
left_join(county_summary %>% select(COUNTY_NAM, pct_underserved_vulnerable),
by = c("COUNTY_NAM" = "COUNTY_NAM"))
ggplot(county_map) +
geom_sf(aes(fill = pct_underserved_vulnerable), color = "white", size = 0.5) +
scale_fill_viridis_c(
name = "Percent Underserved",
option = "magma",
# Format to show percent sign on color bar.
labels = function(x) paste0(x, "%")
) +
labs(
title = "Most Underserved Counties",
subtitle = "Pennsylvania, United States",
caption = "Source: ACS 2019–2023"
) +
theme_void()
top5_pct <- county_summary %>%
arrange(desc(pct_underserved_vulnerable)) %>%
slice_head(n = 5)
top5_pct
top1_pop <- county_summary %>%
arrange(desc(underserved_vulnerable_pop)) %>%
slice_head(n = 1)
top1_pop
# Create and format priority counties table
library(knitr)
library(scales)
# 7.1 Select and format key variables for display
priority_counties <- county_summary %>%
arrange(desc(pct_underserved_vulnerable)) %>%
slice_head(n = 10) %>%
select(
County = COUNTY_NAM,
`Vulnerable Tracts` = vulnerable_tracts,
`Underserved Tracts` = underserved_tracts,
`% Underserved` = pct_underserved_vulnerable,
`Avg Distance (mi)` = avg_distance_vulnerable,
`Total Vulnerable Population` = total_vulnerable_pop
) %>%
mutate(
`Total Vulnerable Population` = comma(`Total Vulnerable Population`),  # add commas
`% Underserved` = percent(`% Underserved` / 100, accuracy = 0.1),
`Avg Distance (mi)` = round(`Avg Distance (mi)`, 1)
)
# 2. Create professional summary table
kable(
priority_counties,
caption = "Table 1. Top 10 Pennsylvania Counties with the Highest Percentage of Underserved Vulnerable Tracts",
align = "lccccc",
digits = 1,
format = "html"
)
# Create county-level access map
library(ggplot2)
library(viridis)
county_map_data <- pa_counties_proj %>%
left_join(county_summary, by = c("COUNTY_NAM" = "COUNTY_NAM"))
ggplot() +
# Counties filled by % underserved vulnerable tracts
geom_sf(data = county_map_data, aes(fill = pct_underserved_vulnerable), color = "white", size = 0.3) +
# Hospital locations as points
geom_sf(data = hospitals_proj, color = "red", size = 1, alpha = 0.7) +
# Color scale for access challenge
scale_fill_viridis(
name = "% Underserved Vulnerable Tracts",
option = "C",
direction = -1,
labels = function(x) paste0(x, "%")
) +
# Map titles and caption
labs(
title = "Healthcare Access Challenges Across Pennsylvania Counties",
subtitle = "Counties shaded by the percentage of vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: American Community Survey (2022), Pennsylvania Hospital Data, and U.S. Census TIGER/Line Shapefiles"
) +
# Clean minimal theme
theme_void() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 10),
plot.caption = element_text(size = 9, color = "gray40"),
legend.position = "bottom"
)
# Create detailed tract-level map
ggplot() +
# 1. 所有普查区背景（灰色）——表示非弱势区域
geom_sf(data = pa_tracts_proj, fill = "grey90", color = NA) +
# 2. 弱势但不服务不足的区域（浅黄色）
geom_sf(data = filter(pa_tracts_proj, vulnerable == TRUE & underserved == FALSE),
fill = "#FED976", color = NA) +
# 3. 服务不足的弱势区域（亮红色，最突出）
geom_sf(data = filter(pa_tracts_proj, underserved == TRUE & vulnerable == TRUE),
fill = "#E31A1C", color = "white", size = 0.05) +
# 4. 县界线（白色）
geom_sf(data = pa_counties_proj, fill = NA, color = "white", size = 0.3) +
# 5. 医院位置（蓝色点）
geom_sf(data = hospitals_proj, color = "blue", size = 0.8, alpha = 0.7) +
# 6. 添加标题、说明与数据来源
labs(
title = "Underserved Vulnerable Tracts in Pennsylvania",
subtitle = "Red areas represent vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: ACS (2022), Pennsylvania Hospital Data, U.S. Census TIGER/Line Shapefiles"
) +
# 7. 设置样式
theme_void() +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 9, color = "grey50")
)
# Create distribution visualization
library(ggplot2)
library(scales)
vulnerable_dist <- pa_tracts_demographics %>%
filter(vulnerable == TRUE)
ggplot(pa_tracts_proj, aes(x = dist_to_hospital_mi)) +
geom_histogram(
aes(y = ..density..),
bins = 30,
fill = "#74add1",
color = "white",
alpha = 0.8
) +
geom_density(color = "#0571b0", size = 1) +
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
annotate("text", x = 15.5, y = 0.02, label = "15-mile threshold", hjust = 0, color = "red", size = 3) +
labs(
title = "Distribution of Distance to Nearest Hospital for Vulnerable Tracts",
subtitle = "Dashed line indicates the 15-mile threshold used to define underserved areas",
x = "Distance to Nearest Hospital (miles)",
y = "Density",
caption = "Source: ACS (2022), Pennsylvania Hospital Data, TIGER/Line Shapefiles"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(size = 9, color = "gray50")
)
