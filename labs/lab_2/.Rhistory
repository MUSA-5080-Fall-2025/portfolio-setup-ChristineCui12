# 1. Pennsylvania county boundaries
pa_counties <- st_read(here("labs/lab_2/data/Pennsylvania_County_Boundaries.shp"))
districts <- st_read(here("labs/lab_2/data/districts.geojson"))
# 2. Pennsylvania hospitals (from lecture data)
hospitals <- st_read(here("labs/lab_2/data/hospitals.geojson"))
# 3. Pennsylvania census tracts
census_tracts <- tracts(state = "PA", cb = TRUE)
metro_areas <- core_based_statistical_areas(cb = TRUE)
# Check that all data loaded correctly
# Get demographic data from ACS
acs_vars <- c(
total_pop = "B01003_001",
med_hh_income = "B19013_001",
# Male 65 years and over (sum of 6 categories)
male_65_66 = "B01001_020",
male_67_69 = "B01001_021",
male_70_74 = "B01001_022",
male_75_79 = "B01001_023",
male_80_84 = "B01001_024",
male_85_up = "B01001_025",
# Female 65 years and over (sum of 6 categories)
female_65_66 = "B01001_044",
female_67_69 = "B01001_045",
female_70_74 = "B01001_046",
female_75_79 = "B01001_047",
female_80_84 = "B01001_048",
female_85_up = "B01001_049"
)
pa_demographics <- get_acs(
geography = "tract",
state = "PA",
variables = acs_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
# Calculate the combined 65+ population and rename variables
mutate(
pop_65_over = male_65_66E + male_67_69E + male_70_74E + male_75_79E + male_80_84E + male_85_upE +
female_65_66E + female_67_69E + female_70_74E + female_75_79E + female_80_84E + female_85_upE
) %>%
# Select and rename final columns for clarity and consistency
select(
GEOID,
total_pop = total_popE,
med_hh_income = med_hh_incomeE,
pop_65_over
)
# Join to tract boundaries
pa_tracts_demographics <- census_tracts %>%
left_join(pa_demographics, by = "GEOID")
#tracts have missing income data
missing_income_count <- pa_tracts_demographics %>%
summarise(missing_count = sum(is.na(med_hh_income))) %>%
pull(missing_count)
#median income across all PA census tracts
median_tract_income <- pa_tracts_demographics %>%
filter(!is.na(med_hh_income)) %>%
summarise(median_income = median(med_hh_income)) %>%
pull(median_income)
# Filter for vulnerable tracts based on your criteria
INCOME_THRESHOLD <- 42112
ELDERLY_PCT_THRESHOLD <- 0.20
pa_vulnerable_tracts <- pa_tracts_demographics %>%
mutate(
pct_65_over = pop_65_over / total_pop
) %>%
filter(
med_hh_income < INCOME_THRESHOLD |
pct_65_over > ELDERLY_PCT_THRESHOLD
)
#percentage of PA vulnerable census tracts
vulnerable_tract_count <- nrow(pa_vulnerable_tracts)
total_tract_count <- nrow(pa_tracts_demographics)
vulnerable_percentage <- (vulnerable_tract_count / total_tract_count) * 100
cat(
"Percentage of PA census tracts considered vulnerable by your definition:\n",
paste0(round(vulnerable_percentage, 1), "%")
)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Calculate distance from each tract centroid to nearest hospital
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(vulnerable_tracts_proj)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals, by_element = FALSE)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
target_crs <- 3857
pa_vulnerable_tracts <- st_transform(pa_vulnerable_tracts, target_crs)
hospitals <- st_transform(hospitals, target_crs)
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
nearest_hospital_distance_m <- apply(distance_matrix, 1, min)
# 4. 将最近距离结果添加回脆弱普查区数据框
pa_vulnerable_tracts_final <- pa_vulnerable_tracts %>%
mutate(
dist_to_nearest_hospital = nearest_hospital_distance_m
) %>%
mutate(
dist_to_nearest_hospital_km = dist_to_nearest_hospital_m / 1000
)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
target_crs <- 3857
pa_vulnerable_tracts <- st_transform(pa_vulnerable_tracts, target_crs)
hospitals <- st_transform(hospitals, target_crs)
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
nearest_hospital_distance_m <- apply(distance_matrix, 1, min)
# 4. 将最近距离结果添加回脆弱普查区数据框
pa_vulnerable_tracts_final <- pa_vulnerable_tracts %>%
mutate(
dist_to_nearest_hospital = nearest_hospital_distance_m
) %>%
mutate(
dist_to_nearest_hospital_km = dist_to_nearest_hospital / 1000
)
View(pa_vulnerable_tracts_final)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
target_crs <- 3857
pa_vulnerable_tracts <- st_transform(pa_vulnerable_tracts, target_crs)
hospitals <- st_transform(hospitals, target_crs)
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
nearest_hospital_distance_m <- apply(distance_matrix, 1, min)
# 4. 将最近距离结果添加回脆弱普查区数据框
pa_vulnerable_tracts_final <- pa_vulnerable_tracts %>%
mutate(
dist_to_nearest_hospital = nearest_hospital_distance_m / 1609.344
)
View(pa_vulnerable_tracts_final)
#average distance to the nearest hospital for vulnerable tracts
average_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(avg_dist = mean(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(avg_dist)
#average distance to the nearest hospital for vulnerable tracts
average_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(avg_dist = mean(dist_to_nearest_hospital, na.rm = TRUE)) %>%
avg_dist
#average distance to the nearest hospital for vulnerable tracts
average_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(avg_dist = mean(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(avg_dist)
#maximum distance to the nearest hospital for vulnerable tracts
max_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(max_dist = max(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(max_dist)
#average distance to the nearest hospital for vulnerable tracts
average_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(avg_dist = mean(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(avg_dist)
#maximum distance to the nearest hospital for vulnerable tracts
max_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(max_dist = max(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(max_dist)
#more than 15 miles from the nearest hospital
tracts_over_15_miles <- pa_vulnerable_tracts_final %>%
filter(dist_to_nearest_hospital > 15) %>%
nrow()
#| echo: true
#| eval: true
set.seed(123)
n <- nrow(pa_data)
#| echo: true
#| eval: true
# Calculate prediction error (RMSE)
rmse_test <- sqrt(mean((test_data$median_incomeE - test_predictions)^2))
#percentage of PA vulnerable census tracts
vulnerable_tract_count <- nrow(pa_vulnerable_tracts)
total_tract_count <- nrow(pa_tracts_demographics)
vulnerable_percentage <- (vulnerable_tract_count / total_tract_count) * 100
)
#percentage of PA vulnerable census tracts
vulnerable_tract_count <- nrow(pa_vulnerable_tracts)
total_tract_count <- nrow(pa_tracts_demographics)
vulnerable_percentage <- (vulnerable_tract_count / total_tract_count) * 100
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
target_crs <- 3857
pa_vulnerable_tracts <- st_transform(pa_vulnerable_tracts, target_crs)
hospitals <- st_transform(hospitals, target_crs)
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
nearest_hospital_distance_m <- apply(distance_matrix, 1, min)
# 4. 将最近距离结果添加回脆弱普查区数据框
pa_vulnerable_tracts_final <- pa_vulnerable_tracts %>%
mutate(
dist_to_nearest_hospital = nearest_hospital_distance_m / 1609.344
)
#average distance to the nearest hospital for vulnerable tracts
average_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(avg_dist = mean(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(avg_dist)
#maximum distance to the nearest hospital for vulnerable tracts
max_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(max_dist = max(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(max_dist)
#more than 15 miles from the nearest hospital
tracts_over_15_miles <- pa_vulnerable_tracts_final %>%
filter(dist_to_nearest_hospital > 15) %>%
nrow()
# Create underserved variable
pa_vulnerable_tracts_final <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
pa_underserved_tracts <- pa_vulnerable_tracts_final %>%
filter(underserved == TRUE)
underserved_tract_count <- nrow(pa_underserved_tracts)
# Create underserved variable
pa_underserved_tracts <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
pa_underserved_tracts <- pa_vulnerable_tracts_final %>%
filter(underserved == TRUE)
underserved_tract_count <- nrow(pa_underserved_tracts)
pa_vulnerable_tracts <- pa_tracts_demographics %>%
mutate(
pct_65_over = pop_65_over / total_pop
)
# Create underserved variable
pa_underserved_tracts_final <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
filter(underserved == TRUE)
# Create underserved variable
pa_underserved_tracts_final <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
pa_underserved_tracts <- pa_vulnerable_tracts_final %>%
filter(underserved == TRUE)
underserved_tract_count <- nrow(pa_underserved_tracts)
pa_vulnerable_tracts <- pa_tracts_demographics %>%
mutate(
pct_65_over = pop_65_over / total_pop
)
# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
census_api_key("20068788c6e79d5716fbceb0dcd562ab23f74ca1")
# Load spatial data
# 1. Pennsylvania county boundaries
pa_counties <- st_read(here("labs/lab_2/data/Pennsylvania_County_Boundaries.shp"))
districts <- st_read(here("labs/lab_2/data/districts.geojson"))
# 2. Pennsylvania hospitals (from lecture data)
hospitals <- st_read(here("labs/lab_2/data/hospitals.geojson"))
# 3. Pennsylvania census tracts
census_tracts <- tracts(state = "PA", cb = TRUE)
metro_areas <- core_based_statistical_areas(cb = TRUE)
# Check that all data loaded correctly
# Get demographic data from ACS
acs_vars <- c(
total_pop = "B01003_001",
med_hh_income = "B19013_001",
# Male 65 years and over (sum of 6 categories)
male_65_66 = "B01001_020",
male_67_69 = "B01001_021",
male_70_74 = "B01001_022",
male_75_79 = "B01001_023",
male_80_84 = "B01001_024",
male_85_up = "B01001_025",
# Female 65 years and over (sum of 6 categories)
female_65_66 = "B01001_044",
female_67_69 = "B01001_045",
female_70_74 = "B01001_046",
female_75_79 = "B01001_047",
female_80_84 = "B01001_048",
female_85_up = "B01001_049"
)
pa_demographics <- get_acs(
geography = "tract",
state = "PA",
variables = acs_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
# Calculate the combined 65+ population and rename variables
mutate(
pop_65_over = male_65_66E + male_67_69E + male_70_74E + male_75_79E + male_80_84E + male_85_upE +
female_65_66E + female_67_69E + female_70_74E + female_75_79E + female_80_84E + female_85_upE
) %>%
# Select and rename final columns for clarity and consistency
select(
GEOID,
total_pop = total_popE,
med_hh_income = med_hh_incomeE,
pop_65_over
)
# Join to tract boundaries
pa_tracts_demographics <- census_tracts %>%
left_join(pa_demographics, by = "GEOID")
#tracts have missing income data
missing_income_count <- pa_tracts_demographics %>%
summarise(missing_count = sum(is.na(med_hh_income))) %>%
pull(missing_count)
#median income across all PA census tracts
median_tract_income <- pa_tracts_demographics %>%
filter(!is.na(med_hh_income)) %>%
summarise(median_income = median(med_hh_income)) %>%
pull(median_income)
# Filter for vulnerable tracts based on your criteria
INCOME_THRESHOLD <- 42112
ELDERLY_PCT_THRESHOLD <- 0.20
vulnerable_tracts <- pa_tracts_demographics %>%
filter(!is.na(med_hh_income)) %>%
mutate(
pct_65_over = pop_65_over / total_pop
) %>%
filter(
med_hh_income < INCOME_THRESHOLD |
pct_65_over > ELDERLY_PCT_THRESHOLD
)
#percentage of PA vulnerable census tracts
vulnerable_tract_count <- nrow(pa_vulnerable_tracts)
# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
census_api_key("20068788c6e79d5716fbceb0dcd562ab23f74ca1")
# Load spatial data
# 1. Pennsylvania county boundaries
pa_counties <- st_read(here("labs/lab_2/data/Pennsylvania_County_Boundaries.shp"))
districts <- st_read(here("labs/lab_2/data/districts.geojson"))
# 2. Pennsylvania hospitals (from lecture data)
hospitals <- st_read(here("labs/lab_2/data/hospitals.geojson"))
# 3. Pennsylvania census tracts
census_tracts <- tracts(state = "PA", cb = TRUE)
metro_areas <- core_based_statistical_areas(cb = TRUE)
# Check that all data loaded correctly
# Get demographic data from ACS
acs_vars <- c(
total_pop = "B01003_001",
med_hh_income = "B19013_001",
# Male 65 years and over (sum of 6 categories)
male_65_66 = "B01001_020",
male_67_69 = "B01001_021",
male_70_74 = "B01001_022",
male_75_79 = "B01001_023",
male_80_84 = "B01001_024",
male_85_up = "B01001_025",
# Female 65 years and over (sum of 6 categories)
female_65_66 = "B01001_044",
female_67_69 = "B01001_045",
female_70_74 = "B01001_046",
female_75_79 = "B01001_047",
female_80_84 = "B01001_048",
female_85_up = "B01001_049"
)
pa_demographics <- get_acs(
geography = "tract",
state = "PA",
variables = acs_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
# Calculate the combined 65+ population and rename variables
mutate(
pop_65_over = male_65_66E + male_67_69E + male_70_74E + male_75_79E + male_80_84E + male_85_upE +
female_65_66E + female_67_69E + female_70_74E + female_75_79E + female_80_84E + female_85_upE
) %>%
# Select and rename final columns for clarity and consistency
select(
GEOID,
total_pop = total_popE,
med_hh_income = med_hh_incomeE,
pop_65_over
)
# Join to tract boundaries
pa_tracts_demographics <- census_tracts %>%
left_join(pa_demographics, by = "GEOID")
#tracts have missing income data
missing_income_count <- pa_tracts_demographics %>%
summarise(missing_count = sum(is.na(med_hh_income))) %>%
pull(missing_count)
#median income across all PA census tracts
median_tract_income <- pa_tracts_demographics %>%
filter(!is.na(med_hh_income)) %>%
summarise(median_income = median(med_hh_income)) %>%
pull(median_income)
# Filter for vulnerable tracts based on your criteria
INCOME_THRESHOLD <- 42112
ELDERLY_PCT_THRESHOLD <- 0.20
vulnerable_tracts <- pa_tracts_demographics %>%
filter(!is.na(med_hh_income)) %>%
mutate(
pct_65_over = pop_65_over / total_pop
) %>%
filter(
med_hh_income < INCOME_THRESHOLD |
pct_65_over > ELDERLY_PCT_THRESHOLD
)
#percentage of PA vulnerable census tracts
vulnerable_tract_count <- nrow(pa_vulnerable_tracts)
#percentage of PA vulnerable census tracts
vulnerable_tract_count <- nrow(vulnerable_tracts)
total_tract_count <- nrow(pa_tracts_demographics)
vulnerable_percentage <- (vulnerable_tract_count / total_tract_count) * 100
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
target_crs <- 3857
pa_vulnerable_tracts <- st_transform(pa_vulnerable_tracts, target_crs)
# Transform to appropriate projected CRS
# Standardize CRS
districts <- st_transform(districts, st_crs(census_tracts))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
target_crs <- 3857
pa_vulnerable_tracts <- st_transform(vulnerable_tracts, target_crs)
hospitals <- st_transform(hospitals, target_crs)
# Calculate distance from each tract centroid to nearest hospital 中心点 (Centroid)
tract_centroids <- st_centroid(pa_vulnerable_tracts)
distance_matrix <- st_distance(tract_centroids, hospitals)
nearest_hospital_distance_m <- apply(distance_matrix, 1, min)
# 4. 将最近距离结果添加回脆弱普查区数据框
pa_vulnerable_tracts_final <- pa_vulnerable_tracts %>%
mutate(
dist_to_nearest_hospital = nearest_hospital_distance_m / 1609.344
)
#average distance to the nearest hospital for vulnerable tracts
average_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(avg_dist = mean(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(avg_dist)
#maximum distance to the nearest hospital for vulnerable tracts
max_distance <- pa_vulnerable_tracts_final %>%
st_drop_geometry() %>%
summarise(max_dist = max(dist_to_nearest_hospital, na.rm = TRUE)) %>%
pull(max_dist)
#more than 15 miles from the nearest hospital
tracts_over_15_miles <- pa_vulnerable_tracts_final %>%
filter(dist_to_nearest_hospital > 15) %>%
nrow()
# Create underserved variable
pa_underserved_tracts_final <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
pa_underserved_tracts <- pa_vulnerable_tracts_final %>%
filter(underserved == TRUE)
# Create underserved variable
pa_underserved_tracts_final <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
pa_underserved_tracts <- pa_vulnerable_tracts_final %>%
filter(underserved == TRUE)
# Create underserved variable
pa_underserved_tracts_final <- pa_vulnerable_tracts_final %>%
mutate(underserved = dist_to_nearest_hospital > 15)
pa_underserved_tracts_final <- pa_vulnerable_tracts_final %>%
filter(underserved == TRUE)
