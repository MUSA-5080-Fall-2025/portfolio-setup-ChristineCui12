geom_sf(data = filter(pa_tracts_proj, vulnerable == TRUE & underserved == FALSE),
fill = "#FED976", color = NA) +
# 3. 服务不足的弱势区域（亮红色，最突出）
geom_sf(data = filter(pa_tracts_proj, underserved == TRUE & vulnerable == TRUE),
fill = "#E31A1C", color = "white", size = 0.05) +
# 4. 县界线（白色）
geom_sf(data = pa_counties_proj, fill = NA, color = "white", size = 0.3) +
# 5. 医院位置（蓝色点）
geom_sf(data = hospitals_proj, color = "blue", size = 0.8, alpha = 0.7) +
# 6. 添加标题、说明与数据来源
labs(
title = "Underserved Vulnerable Tracts in Pennsylvania",
subtitle = "Red areas represent vulnerable tracts located more than 15 miles from the nearest hospital",
caption = "Data sources: ACS (2022), Pennsylvania Hospital Data, U.S. Census TIGER/Line Shapefiles"
) +
# 7. 设置样式
theme_void() +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 9, color = "grey50")
)
# Create distribution visualization
library(ggplot2)
library(scales)
vulnerable_dist <- pa_tracts_demographics %>%
filter(vulnerable == TRUE)
ggplot(pa_tracts_proj, aes(x = dist_to_hospital_mi)) +
geom_histogram(
aes(y = ..density..),
bins = 30,
fill = "#74add1",
color = "white",
alpha = 0.8
) +
geom_density(color = "#0571b0", size = 1) +
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
annotate("text", x = 15.5, y = 0.02, label = "15-mile threshold", hjust = 0, color = "red", size = 3) +
labs(
title = "Distribution of Distance to Nearest Hospital for Vulnerable Tracts",
subtitle = "Dashed line indicates the 15-mile threshold used to define underserved areas",
x = "Distance to Nearest Hospital (miles)",
y = "Density",
caption = "Source: ACS (2022), Pennsylvania Hospital Data, TIGER/Line Shapefiles"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(size = 9, color = "gray50")
)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = philly_fips,
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
select(
GEOID,
pop_black = pop_blackE,
pop_asian = pop_asianE,
pop_total_race = pop_totalE # Total population used for race denominator
) %>%
# Calculate percent non-white (Black + Asian as a proxy for a key minority population)
mutate(
pct_non_white = ((pop_black + pop_asian) / pop_total_race) * 100
)
View(pa_tracts_proj)
View(vulnerable_distance_summary)
View(vulnerable_dist)
# Create distribution visualization
library(ggplot2)
library(scales)
vulnerable_dist <- pa_tracts_demographics %>%
filter(vulnerable == TRUE)
ggplot(pa_tracts_proj, aes(x = dist_to_hospital_mi)) +
geom_histogram(
aes(y = total_pop),
bins = 30,
fill = "#74add1",
color = "white",
alpha = 0.8
) +
geom_density(color = "#0571b0", size = 1) +
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
annotate("text", x = 15.5, y = 0.02, label = "15-mile threshold", hjust = 0, color = "red", size = 3) +
labs(
title = "Distribution of Distance to Nearest Hospital for Vulnerable Tracts",
subtitle = "Dashed line indicates the 15-mile threshold used to define underserved areas",
x = "Distance to Nearest Hospital (miles)",
y = "Density",
caption = "Source: ACS (2022), Pennsylvania Hospital Data, TIGER/Line Shapefiles"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(size = 9, color = "gray50")
)
# Create distribution visualization
library(ggplot2)
library(scales)
vulnerable_dist <- pa_tracts_demographics %>%
filter(vulnerable == TRUE)
ggplot(
# 1. 筛选出脆弱区域的数据进行绘图
data = pa_tracts_proj %>% filter(vulnerable == TRUE),
aes(x = dist_to_hospital_mi)
) +
# 2. 使用 geom_histogram 并设置 weight = total_pop
#    这使得直方图的条高代表该距离范围内的总人口数
geom_histogram(
aes(y = after_stat(count), weight = total_pop),
bins = 30,
fill = "#74add1",
color = "white",
alpha = 0.8
) +
# 3. 删除 geom_density()：密度图不适用于加权人口总数直方图
# 4. 垂直线和标注
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
# 注意：y 轴现在是人口数，0.02 可能太小，需要调整 y 轴标注位置
# 假设最大人口数大约在 100,000 左右，将 y 调整为 10000
annotate("text", x = 15.5, y = 10000, label = "15-mile threshold", hjust = 0, color = "red", size = 3) +
# 5. 标签和主题
labs(
title = "Distribution of Hospital Distance for Vulnerable Population",
subtitle = "Histogram weighted by the total population of vulnerable census tracts",
x = "Distance to Nearest Hospital (miles)",
# Y 轴标签现在代表人口数量
y = "Total Vulnerable Population Count",
caption = "Source: ACS (2022), Pennsylvania Hospital Data, TIGER/Line Shapefiles"
) +
scale_y_continuous(labels = scales::comma) + # 格式化 Y 轴数字
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(size = 9, color = "gray50")
)
# Create distribution visualization
library(ggplot2)
library(scales)
vulnerable_tract <- pa_tracts_demographics %>%
filter(vulnerable == TRUE)
ggplot(
# 1. 筛选出脆弱区域的数据进行绘图
data = pa_tracts_proj %>% filter(vulnerable == TRUE),
aes(x = dist_to_hospital_mi)
) +
# 2. 使用 geom_histogram 并设置 weight = total_pop
#    这使得直方图的条高代表该距离范围内的总人口数
geom_histogram(
aes(y = after_stat(count), weight = total_pop),
bins = 30,
fill = "#74add1",
color = "white",
alpha = 0.8
) +
# 3. 删除 geom_density()：密度图不适用于加权人口总数直方图
# 4. 垂直线和标注
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
# 注意：y 轴现在是人口数，0.02 可能太小，需要调整 y 轴标注位置
# 假设最大人口数大约在 100,000 左右，将 y 调整为 10000
annotate("text", x = 15.5, y = 10000, label = "15-mile threshold", hjust = 0, color = "red", size = 3) +
# 5. 标签和主题
labs(
title = "Distribution of Hospital Distance for Vulnerable Population",
subtitle = "Histogram weighted by the total population of vulnerable census tracts",
x = "Distance to Nearest Hospital (miles)",
# Y 轴标签现在代表人口数量
y = "Total Vulnerable Population Count",
caption = "Source: ACS (2022), Pennsylvania Hospital Data, TIGER/Line Shapefiles"
) +
scale_y_continuous(labels = scales::comma) + # 格式化 Y 轴数字
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(size = 9, color = "gray50")
)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = philly_fips,
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
select(
GEOID,
pop_black = pop_blackE,
pop_asian = pop_asianE,
pop_total_race = pop_totalE # Total population used for race denominator
) %>%
# Calculate percent non-white (Black + Asian as a proxy for a key minority population)
mutate(
pct_non_white = ((pop_black + pop_asian) / pop_total_race) * 100
)
# Create distribution visualization
library(ggplot2)
library(scales)
vulnerable_tract <- pa_tracts_demographics %>%
filter(vulnerable == TRUE)
ggplot(
# 1. 筛选出脆弱区域的数据进行绘图
data = pa_tracts_proj %>% filter(vulnerable == TRUE),
aes(x = dist_to_hospital_mi)
) +
# 2. 使用 geom_histogram 并设置 weight = total_pop
#    这使得直方图的条高代表该距离范围内的总人口数
geom_histogram(
aes(y = after_stat(count), weight = total_pop),
bins = 30,
fill = "#74add1",
color = "white",
alpha = 0.8
) +
# 3. 删除 geom_density()：密度图不适用于加权人口总数直方图
# 4. 垂直线和标注
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
# 注意：y 轴现在是人口数，0.02 可能太小，需要调整 y 轴标注位置
# 假设最大人口数大约在 100,000 左右，将 y 调整为 10000
annotate("text", x = 15.5, y = 10000, label = "15-mile threshold", hjust = 0, color = "red", size = 3) +
# 5. 标签和主题
labs(
title = "Distribution of Hospital Distance for Vulnerable Population",
subtitle = "Histogram weighted by the total population of vulnerable census tracts",
x = "Distance to Nearest Hospital (miles)",
# Y 轴标签现在代表人口数量
y = "Total Vulnerable Population Count",
caption = "Source: ACS (2022), Pennsylvania Hospital Data"
) +
scale_y_continuous(labels = scales::comma) + # 格式化 Y 轴数字
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(size = 9, color = "gray50")
)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = philly_fips,
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
select(
GEOID,
pop_black = pop_blackE,
pop_asian = pop_asianE,
pop_total_race = pop_totalE # Total population used for race denominator
) %>%
# Calculate percent non-white (Black + Asian as a proxy for a key minority population)
mutate(
pct_non_white = ((pop_black + pop_asian) / pop_total_race) * 100
)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = philly_fips,
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
) %>%
select(
GEOID,
pop_black = pop_blackE,
pop_asian = pop_asianE,
pop_total_race = pop_totalE # Total population used for race denominator
) %>%
# Calculate percent non-white (Black + Asian as a proxy for a key minority population)
mutate(
pct_non_white = ((pop_black + pop_asian) / pop_total_race) * 100
)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
test_data <- get_acs(
geography = "tract",
state = "PA",
variables = "B01001_001",  # 总人口变量
year = 2022
)
# Join race data to the Philadelphia tracts
philly_tracts_demographics <- philly_tracts_demographics %>%
left_join(philly_race_demographics, by = "GEOID") %>%
# Filter out tracts with 0 population to avoid division-by-zero errors in per-capita metrics
filter(total_pop > 0)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
test_data <- get_acs(
geography = "tract",
state = "PA",
variables = "B01001_001",  # 总人口变量
year = 2022
)
if(nrow(test_data) > 0) {
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = "101",
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
)
} else {
message("20068788c6e79d5716fbceb0dcd562ab23f74ca1")
}
View(test_data)
View(philly_race_demographics)
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
test_data <- get_acs(
geography = "tract",
state = "PA",
variables = "B01001_001",  # 总人口变量
year = 2022
)
if(nrow(test_data) > 0) {
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = "101",
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
)
} else {
message("20068788c6e79d5716fbceb0dcd562ab23f74ca1")
}
# Join race data to the Philadelphia tracts
philly_tracts_demographics <- philly_tracts_demographics %>%
left_join(philly_race_demographics, by = "GEOID") %>%
# Filter out tracts with 0 population to avoid division-by-zero errors in per-capita metrics
filter(total_pop > 0)
# Check and standardize CRS
ppr_properties_proj <- st_transform(ppr_properties, crs = 5070) # Project to NAD83/Conus Albers
philly_tracts_proj <- st_transform(philly_tracts_demographics, crs = 5070)
# Print summaries
cat("PPR Properties CRS:", st_crs(ppr_properties)$input, "\n")
cat("Philly Tracts CRS:", st_crs(philly_tracts_demographics)$input, "\n")
cat("PPR Properties Projected CRS:", st_crs(ppr_properties_proj)$input, "\n")
# Load your additional dataset
# 1. Load the PPR Properties (Parks) GeoJSON from OpenDataPhilly
# Downloaded from: https://opendataphilly.org/datasets/ppr-properties/
# I will use a local file for stability, assuming it was downloaded to 'labs/lab_2/data/'
ppr_properties <- st_read(here("labs/lab_2/data/PPR_Properties.geojson"))
# 2. Get Philadelphia-specific census tracts and demographics for the analysis
# Filter the Pennsylvania tracts to only include Philadelphia County (FIPS code 101)
philly_fips <- "42101" # Pennsylvania FIPS is 42, Philadelphia County FIPS is 101
# Filter the previously loaded PA tracts/demographics for Philadelphia
philly_tracts_demographics <- pa_tracts_demographics %>%
filter(COUNTYFP == "101")
# Get additional race/ethnicity data for equity analysis
race_vars <- c(
pop_black = "B02001_003", # Black or African American Alone
pop_asian = "B02001_005", # Asian Alone
pop_total = "B02001_001"
)
test_data <- get_acs(
geography = "tract",
state = "PA",
variables = "B01001_001",  # 总人口变量
year = 2022
)
if(nrow(test_data) > 0) {
philly_race_demographics <- get_acs(
geography = "tract",
state = "PA",
county = "101",
variables = race_vars,
output = "wide",
year = 2022,
geometry = FALSE
)
} else {
message("20068788c6e79d5716fbceb0dcd562ab23f74ca1")
}
# Join race data to the Philadelphia tracts
philly_tracts_demographics <- philly_tracts_demographics %>%
left_join(philly_race_demographics, by = "GEOID") %>%
# Filter out tracts with 0 population to avoid division-by-zero errors in per-capita metrics
filter(total_pop > 0)
# Check and standardize CRS
ppr_properties_proj <- st_transform(ppr_properties, crs = 4326) # Project to NAD83/Conus Albers
philly_tracts_proj <- st_transform(philly_tracts_demographics, crs = 4326)
# Print summaries
cat("PPR Properties CRS:", st_crs(ppr_properties)$input, "\n")
cat("Philly Tracts CRS:", st_crs(philly_tracts_demographics)$input, "\n")
cat("PPR Properties Projected CRS:", st_crs(ppr_properties_proj)$input, "\n")
